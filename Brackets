A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:

S is empty;
S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, the string "{[()()]}" is properly nested but "([)()]" is not.

Write a function:

function solution($S);

that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.

For example, given S = "{[()()]}", the function should return 1 and given S = "([)()]", the function should return 0, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..200,000];
string S consists only of the following characters: "(", "{", "[", "]", "}" and/or ")".


************************************** SOLUTION ******************************************

function solution($S)
{
    $string = $S;
    $stack = new SplStack();

    $length = strlen($string);

    if ($length == 0) {
        return 1;
    }

    if ($length < 0 || $length > 200000) {
        return 0;
    }

    for ($i = 0; $i < $length; $i++) {
        $chr = substr($string, $i, 1);


        if ($chr == "(" ||
            $chr == "{" ||
            $chr == "["
        ) {

            $stack->push($chr);
        }

        if ($chr == ")" ||
            $chr == "}" ||
            $chr == "]"
        ) {

            if ($stack->isEmpty()) {
                return 0;
            }

            $stored = $stack->pop();

            if (($stored == "{" && $chr != "}") ||
                ($stored == "(" && $chr != ")") ||
                ($stored == "[" && $chr != "]")
            ) {

                return 0;
            }
        }
    }
    
    if (!$stack->isEmpty()) {
        return 0;
    }

    return 1;
}
