An array A consisting of N integers is given. A triplet (P, Q, R) is triangular if 0 ≤ P < Q < R < N and:

A[P] + A[Q] > A[R],
A[Q] + A[R] > A[P],
A[R] + A[P] > A[Q].
For example, consider array A such that:

  A[0] = 10    A[1] = 2    A[2] = 5
  A[3] = 1     A[4] = 8    A[5] = 20
Triplet (0, 2, 4) is triangular.

Write a function:

function solution($A);

that, given an array A consisting of N integers, returns 1 if there exists a triangular triplet for this array and returns 0 otherwise.

For example, given array A such that:

  A[0] = 10    A[1] = 2    A[2] = 5
  A[3] = 1     A[4] = 8    A[5] = 20
the function should return 1, as explained above. Given array A such that:

  A[0] = 10    A[1] = 50    A[2] = 5
  A[3] = 1
the function should return 0.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..100,000];
each element of array A is an integer within the range [−2,147,483,648..2,147,483,647].


************************************* SOLUTION **************************************

function solution($A)
{
    sort($A);
    $length = sizeof($A);

    $p = $A[$length - 3];
    $q = $A[$length - 2];
    $r = $A[$length - 1];

    if (checkTriangle($p, $q, $r)) {
        return 1;
    }

    $p = $A[0];
    $q = $A[1];
    $r = $A[2];

    if (checkTriangle($p, $q, $r)) {
        return 1;
    }

    for ($i = 1; $i <= $length; $i++) {
        if (!isset($A[$i + 2])) {
            break;
        }

        $p = $A[$i];
        $q = $A[$i + 1];
        $r = $A[$i + 2];

        if (checkTriangle($p, $q, $r)) {
            return 1;

            break;
        }
    }

    return 0;
}

function checkTriangle($p, $q, $r)
{
    if (($p + $q > $r) &&
        ($p + $r > $q) &&
        ($q + $r) > $p
    ) {

        return true;
    }

    return false;
}
