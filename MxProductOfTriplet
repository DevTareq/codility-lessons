A non-empty array A consisting of N integers is given. The product of triplet (P, Q, R) equates to A[P] * A[Q] * A[R] (0 ≤ P < Q < R < N).

For example, array A such that:

  A[0] = -3
  A[1] = 1
  A[2] = 2
  A[3] = -2
  A[4] = 5
  A[5] = 6
contains the following example triplets:

(0, 1, 2), product is −3 * 1 * 2 = −6
(1, 2, 4), product is 1 * 2 * 5 = 10
(2, 4, 5), product is 2 * 5 * 6 = 60
Your goal is to find the maximal product of any triplet.

Write a function:

function solution($A);

that, given a non-empty array A, returns the value of the maximal product of any triplet.

For example, given array A such that:

  A[0] = -3
  A[1] = 1
  A[2] = 2
  A[3] = -2
  A[4] = 5
  A[5] = 6
the function should return 60, as the product of triplet (2, 4, 5) is maximal.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [3..100,000];
each element of array A is an integer within the range [−1,000..1,000].

******************************************* SOLUTION ********************************************

function solution($A) {
    // write your code in PHP7.0
    $max = 0;

    if (!isValid($A)) {
        return $max;
    }

    sort($A);

    $length = sizeof($A);

    $maxProduct = $A[$length - 1] * $A[$length - 2] * $A[$length - 3];

    if ($A[0] < 0 && $A[1] < 0) {
        $tmp = $A[0] * $A[1] * $A[$length - 1];

        if ($tmp > $maxProduct) {
            $maxProduct = $tmp;
        }
    }

    return $maxProduct;
}

function isValid($array)
{
    if (!is_array($array)) {
        return false;
    }

    $length = sizeof($array);

    if ($length < 3 || $length > 100000) {
        return false;
    }

    for ($i = 0; $i < $length; $i++) {
        if ($array[$i] < -abs(1000) || $array[$i] > 1000) {

            return false;
            break;
        }
    }

    return true;
}
